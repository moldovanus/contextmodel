package testOntology;


import edu.stanford.smi.protegex.owl.javacode.ProtegeJavaMapping;
import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.RDFProperty;
import edu.stanford.smi.protegex.owl.model.RDFResource;
import edu.stanford.smi.protegex.owl.model.RDFSNamedClass;
import edu.stanford.smi.protegex.owl.model.impl.OWLUtil;
import testOntology.impl.DefaultTest;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 *
 * @version generated on Tue Aug 24 10:09:10 EEST 2010
 */
public class TestFactory {

    private OWLModel owlModel;

    static {
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Ontology1282633635.owl#Test", Test.class, DefaultTest.class);
    }

    public TestFactory(OWLModel owlModel) {
        this.owlModel = owlModel;
    }

    public <X> X create(Class<? extends X> javaInterface, String name) {
        return ProtegeJavaMapping.create(owlModel, javaInterface, name);
    }


    public RDFSNamedClass getTestClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1282633635.owl#Test";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Test createTest(String name) {
        final RDFSNamedClass cls = getTestClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultTest(owlModel, cls.createInstance(name).getFrameID());
    }

    public Test getTest(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof Test) {
            return (Test) res;
        } else if (res.hasProtegeType(getTestClass())) {
            return new DefaultTest(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Test> getAllTestInstances() {
        return getAllTestInstances(false);
    }

    public Collection<Test> getAllTestInstances(boolean transitive) {
        Collection<Test> result = new ArrayList<Test>();
        final RDFSNamedClass cls = getTestClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultTest(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFProperty getTestValueProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1282633635.owl#testValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }
}
