package model.impl.ontologyImpl;


import edu.stanford.smi.protegex.owl.javacode.ProtegeJavaMapping;
import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.RDFProperty;
import edu.stanford.smi.protegex.owl.model.RDFResource;
import edu.stanford.smi.protegex.owl.model.RDFSNamedClass;
import edu.stanford.smi.protegex.owl.model.impl.OWLUtil;
import model.interfaces.ContextElement;
import model.interfaces.actions.*;
import model.interfaces.policies.*;
import model.interfaces.resources.*;
import model.interfaces.resources.applications.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 *
 * @version generated on Fri Jul 09 18:31:36 GMT 2010
 */
public class ContextModelFactory {

    private OWLModel owlModel;

    static {
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#DPMAction", DPMAction.class, DefaultDPMAction.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ITComputingResourceAdaptationAction", ITComputingResourceAdaptationAction.class, DefaultITComputingResourceAdaptationAction.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ContextAction", ContextAction.class, DefaultContextAction.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#HDDIntensiveActivity", HDDIntensiveActivity.class, DefaultHDDIntensiveActivity.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ApplicationActivity", ApplicationActivity.class, DefaultApplicationActivity.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#GPI_KPI_Policy", GPI_KPI_Policy.class, DefaultGPI_KPI_Policy.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ContextPolicy", ContextPolicy.class, DefaultContextPolicy.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ServiceCenterITComputingResource", ServiceCenterITComputingResource.class, DefaultServiceCenterITComputingResource.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ContextResource", ContextResource.class, DefaultContextResource.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ServiceCenterServer", ServiceCenterServer.class, DefaultServiceCenterServer.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ComplexResource", ComplexResource.class, DefaultComplexResource.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ContextElement", ContextElement.class, DefaultContextElement.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ServiceCenterITFacilityResource", ServiceCenterITFacilityResource.class, DefaultServiceCenterITFacilityResource.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#BusinessContextResource", BusinessContextResource.class, DefaultBusinessContextResource.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#Application", Application.class, DefaultApplication.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#CPUIntensiveActivity", CPUIntensiveActivity.class, DefaultCPUIntensiveActivity.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ApplicationAdaptationAction", ApplicationAdaptationAction.class, DefaultApplicationAdaptationAction.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ApplicationRedesign", ApplicationRedesign.class, DefaultApplicationRedesign.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ITFacilityActiveResource", ITFacilityActiveResource.class, DefaultITFacilityActiveResource.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#HDD", HDD.class, DefaultHDD.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#SimpleResource", SimpleResource.class, DefaultSimpleResource.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ITComputingContextPolicy", ITComputingContextPolicy.class, DefaultITComputingContextPolicy.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ITFacilityPassiveResource", ITFacilityPassiveResource.class, DefaultITFacilityPassiveResource.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#MigrateActivity", MigrateActivity.class, DefaultMigrateActivity.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ConsolidationAction", ConsolidationAction.class, DefaultConsolidationAction.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#Sensor", Sensor.class, DefaultSensor.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#Actuator", Actuator.class, DefaultActuator.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#BusinessPolicy", BusinessPolicy.class, DefaultBusinessPolicy.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#MEM", MEM.class, DefaultMEM.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ExternalStorage", ExternalStorage.class, DefaultExternalStorage.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#CPU", CPU.class, DefaultCPU.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#SLAPolicy", SLAPolicy.class, DefaultSLAPolicy.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#MEMIntensiveActivity", MEMIntensiveActivity.class, DefaultMEMIntensiveActivity.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#Facility", Facility.class, DefaultFacility.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#QoSPolicy", QoSPolicy.class, DefaultQoSPolicy.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#DeployActivity", DeployActivity.class, DefaultDeployActivity.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#EnvironmentPolicy", EnvironmentPolicy.class, DefaultEnvironmentPolicy.class);
        ProtegeJavaMapping.add("http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ITFacilityResourceAdaptationAction", ITFacilityResourceAdaptationAction.class, DefaultITFacilityResourceAdaptationAction.class);
    }

    public ContextModelFactory(OWLModel owlModel) {
        this.owlModel = owlModel;
    }

    public <X> X create(Class<? extends X> javaInterface, String name) {
        return ProtegeJavaMapping.create(owlModel, javaInterface, name);
    }


    public RDFSNamedClass getDPMActionClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#DPMAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public DPMAction createDPMAction(String name) {
        final RDFSNamedClass cls = getDPMActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultDPMAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public DPMAction getDPMAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof DPMAction) {
            return (DPMAction) res;
        } else if (res.hasProtegeType(getDPMActionClass())) {
            return new DefaultDPMAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<DPMAction> getAllDPMActionInstances() {
        return getAllDPMActionInstances(false);
    }

    public Collection<DPMAction> getAllDPMActionInstances(boolean transitive) {
        Collection<DPMAction> result = new ArrayList<DPMAction>();
        final RDFSNamedClass cls = getDPMActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDPMAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getITComputingResourceAdaptationActionClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ITComputingResourceAdaptationAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ITComputingResourceAdaptationAction createITComputingResourceAdaptationAction(String name) {
        final RDFSNamedClass cls = getITComputingResourceAdaptationActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultITComputingResourceAdaptationAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public ITComputingResourceAdaptationAction getITComputingResourceAdaptationAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ITComputingResourceAdaptationAction) {
            return (ITComputingResourceAdaptationAction) res;
        } else if (res.hasProtegeType(getITComputingResourceAdaptationActionClass())) {
            return new DefaultITComputingResourceAdaptationAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ITComputingResourceAdaptationAction> getAllITComputingResourceAdaptationActionInstances() {
        return getAllITComputingResourceAdaptationActionInstances(false);
    }

    public Collection<ITComputingResourceAdaptationAction> getAllITComputingResourceAdaptationActionInstances(boolean transitive) {
        Collection<ITComputingResourceAdaptationAction> result = new ArrayList<ITComputingResourceAdaptationAction>();
        final RDFSNamedClass cls = getITComputingResourceAdaptationActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultITComputingResourceAdaptationAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getContextActionClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ContextAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ContextAction createContextAction(String name) {
        final RDFSNamedClass cls = getContextActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultContextAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public ContextAction getContextAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ContextAction) {
            return (ContextAction) res;
        } else if (res.hasProtegeType(getContextActionClass())) {
            return new DefaultContextAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ContextAction> getAllContextActionInstances() {
        return getAllContextActionInstances(false);
    }

    public Collection<ContextAction> getAllContextActionInstances(boolean transitive) {
        Collection<ContextAction> result = new ArrayList<ContextAction>();
        final RDFSNamedClass cls = getContextActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultContextAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHDDIntensiveActivityClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#HDDIntensiveActivity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public HDDIntensiveActivity createHDDIntensiveActivity(String name) {
        final RDFSNamedClass cls = getHDDIntensiveActivityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultHDDIntensiveActivity(owlModel, cls.createInstance(name).getFrameID());
    }

    public HDDIntensiveActivity getHDDIntensiveActivity(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof HDDIntensiveActivity) {
            return (HDDIntensiveActivity) res;
        } else if (res.hasProtegeType(getHDDIntensiveActivityClass())) {
            return new DefaultHDDIntensiveActivity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<HDDIntensiveActivity> getAllHDDIntensiveActivityInstances() {
        return getAllHDDIntensiveActivityInstances(false);
    }

    public Collection<HDDIntensiveActivity> getAllHDDIntensiveActivityInstances(boolean transitive) {
        Collection<HDDIntensiveActivity> result = new ArrayList<HDDIntensiveActivity>();
        final RDFSNamedClass cls = getHDDIntensiveActivityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHDDIntensiveActivity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getApplicationActivityClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ApplicationActivity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ApplicationActivity createApplicationActivity(String name) {
        final RDFSNamedClass cls = getApplicationActivityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultApplicationActivity(owlModel, cls.createInstance(name).getFrameID());
    }

    public ApplicationActivity getApplicationActivity(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ApplicationActivity) {
            return (ApplicationActivity) res;
        } else if (res.hasProtegeType(getApplicationActivityClass())) {
            return new DefaultApplicationActivity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ApplicationActivity> getAllApplicationActivityInstances() {
        return getAllApplicationActivityInstances(false);
    }

    public Collection<ApplicationActivity> getAllApplicationActivityInstances(boolean transitive) {
        Collection<ApplicationActivity> result = new ArrayList<ApplicationActivity>();
        final RDFSNamedClass cls = getApplicationActivityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultApplicationActivity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getGPI_KPI_PolicyClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#GPI_KPI_Policy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public GPI_KPI_Policy createGPI_KPI_Policy(String name) {
        final RDFSNamedClass cls = getGPI_KPI_PolicyClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultGPI_KPI_Policy(owlModel, cls.createInstance(name).getFrameID());
    }

    public GPI_KPI_Policy getGPI_KPI_Policy(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof GPI_KPI_Policy) {
            return (GPI_KPI_Policy) res;
        } else if (res.hasProtegeType(getGPI_KPI_PolicyClass())) {
            return new DefaultGPI_KPI_Policy(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<GPI_KPI_Policy> getAllGPI_KPI_PolicyInstances() {
        return getAllGPI_KPI_PolicyInstances(false);
    }

    public Collection<GPI_KPI_Policy> getAllGPI_KPI_PolicyInstances(boolean transitive) {
        Collection<GPI_KPI_Policy> result = new ArrayList<GPI_KPI_Policy>();
        final RDFSNamedClass cls = getGPI_KPI_PolicyClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultGPI_KPI_Policy(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getContextPolicyClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ContextPolicy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ContextPolicy createContextPolicy(String name) {
        final RDFSNamedClass cls = getContextPolicyClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultContextPolicy(owlModel, cls.createInstance(name).getFrameID());
    }

    public ContextPolicy getContextPolicy(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ContextPolicy) {
            return (ContextPolicy) res;
        } else if (res.hasProtegeType(getContextPolicyClass())) {
            return new DefaultContextPolicy(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ContextPolicy> getAllContextPolicyInstances() {
        return getAllContextPolicyInstances(false);
    }

    public Collection<ContextPolicy> getAllContextPolicyInstances(boolean transitive) {
        Collection<ContextPolicy> result = new ArrayList<ContextPolicy>();
        final RDFSNamedClass cls = getContextPolicyClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultContextPolicy(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getServiceCenterITComputingResourceClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ServiceCenterITComputingResource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ServiceCenterITComputingResource createServiceCenterITComputingResource(String name) {
        final RDFSNamedClass cls = getServiceCenterITComputingResourceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultServiceCenterITComputingResource(owlModel, cls.createInstance(name).getFrameID());
    }

    public ServiceCenterITComputingResource getServiceCenterITComputingResource(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ServiceCenterITComputingResource) {
            return (ServiceCenterITComputingResource) res;
        } else if (res.hasProtegeType(getServiceCenterITComputingResourceClass())) {
            return new DefaultServiceCenterITComputingResource(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ServiceCenterITComputingResource> getAllServiceCenterITComputingResourceInstances() {
        return getAllServiceCenterITComputingResourceInstances(false);
    }

    public Collection<ServiceCenterITComputingResource> getAllServiceCenterITComputingResourceInstances(boolean transitive) {
        Collection<ServiceCenterITComputingResource> result = new ArrayList<ServiceCenterITComputingResource>();
        final RDFSNamedClass cls = getServiceCenterITComputingResourceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultServiceCenterITComputingResource(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getContextResourceClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ContextResource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ContextResource createContextResource(String name) {
        final RDFSNamedClass cls = getContextResourceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultContextResource(owlModel, cls.createInstance(name).getFrameID());
    }

    public ContextResource getContextResource(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ContextResource) {
            return (ContextResource) res;
        } else if (res.hasProtegeType(getContextResourceClass())) {
            return new DefaultContextResource(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ContextResource> getAllContextResourceInstances() {
        return getAllContextResourceInstances(false);
    }

    public Collection<ContextResource> getAllContextResourceInstances(boolean transitive) {
        Collection<ContextResource> result = new ArrayList<ContextResource>();
        final RDFSNamedClass cls = getContextResourceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultContextResource(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getServiceCenterServerClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ServiceCenterServer";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ServiceCenterServer createServiceCenterServer(String name) {
        final RDFSNamedClass cls = getServiceCenterServerClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultServiceCenterServer(owlModel, cls.createInstance(name).getFrameID());
    }

    public ServiceCenterServer getServiceCenterServer(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ServiceCenterServer) {
            return (ServiceCenterServer) res;
        } else if (res.hasProtegeType(getServiceCenterServerClass())) {
            return new DefaultServiceCenterServer(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ServiceCenterServer> getAllServiceCenterServerInstances() {
        return getAllServiceCenterServerInstances(false);
    }

    public Collection<ServiceCenterServer> getAllServiceCenterServerInstances(boolean transitive) {
        Collection<ServiceCenterServer> result = new ArrayList<ServiceCenterServer>();
        final RDFSNamedClass cls = getServiceCenterServerClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultServiceCenterServer(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getComplexResourceClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ComplexResource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ComplexResource createComplexResource(String name) {
        final RDFSNamedClass cls = getComplexResourceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultComplexResource(owlModel, cls.createInstance(name).getFrameID());
    }

    public ComplexResource getComplexResource(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ComplexResource) {
            return (ComplexResource) res;
        } else if (res.hasProtegeType(getComplexResourceClass())) {
            return new DefaultComplexResource(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ComplexResource> getAllComplexResourceInstances() {
        return getAllComplexResourceInstances(false);
    }

    public Collection<ComplexResource> getAllComplexResourceInstances(boolean transitive) {
        Collection<ComplexResource> result = new ArrayList<ComplexResource>();
        final RDFSNamedClass cls = getComplexResourceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultComplexResource(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getContextElementClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ContextElement";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ContextElement createContextElement(String name) {
        final RDFSNamedClass cls = getContextElementClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultContextElement(owlModel, cls.createInstance(name).getFrameID());
    }

    public ContextElement getContextElement(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ContextElement) {
            return (ContextElement) res;
        } else if (res.hasProtegeType(getContextElementClass())) {
            return new DefaultContextElement(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ContextElement> getAllContextElementInstances() {
        return getAllContextElementInstances(false);
    }

    public Collection<ContextElement> getAllContextElementInstances(boolean transitive) {
        Collection<ContextElement> result = new ArrayList<ContextElement>();
        final RDFSNamedClass cls = getContextElementClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultContextElement(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getServiceCenterITFacilityResourceClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ServiceCenterITFacilityResource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ServiceCenterITFacilityResource createServiceCenterITFacilityResource(String name) {
        final RDFSNamedClass cls = getServiceCenterITFacilityResourceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultServiceCenterITFacilityResource(owlModel, cls.createInstance(name).getFrameID());
    }

    public ServiceCenterITFacilityResource getServiceCenterITFacilityResource(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ServiceCenterITFacilityResource) {
            return (ServiceCenterITFacilityResource) res;
        } else if (res.hasProtegeType(getServiceCenterITFacilityResourceClass())) {
            return new DefaultServiceCenterITFacilityResource(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ServiceCenterITFacilityResource> getAllServiceCenterITFacilityResourceInstances() {
        return getAllServiceCenterITFacilityResourceInstances(false);
    }

    public Collection<ServiceCenterITFacilityResource> getAllServiceCenterITFacilityResourceInstances(boolean transitive) {
        Collection<ServiceCenterITFacilityResource> result = new ArrayList<ServiceCenterITFacilityResource>();
        final RDFSNamedClass cls = getServiceCenterITFacilityResourceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultServiceCenterITFacilityResource(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getBusinessContextResourceClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#BusinessContextResource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public BusinessContextResource createBusinessContextResource(String name) {
        final RDFSNamedClass cls = getBusinessContextResourceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultBusinessContextResource(owlModel, cls.createInstance(name).getFrameID());
    }

    public BusinessContextResource getBusinessContextResource(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof BusinessContextResource) {
            return (BusinessContextResource) res;
        } else if (res.hasProtegeType(getBusinessContextResourceClass())) {
            return new DefaultBusinessContextResource(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<BusinessContextResource> getAllBusinessContextResourceInstances() {
        return getAllBusinessContextResourceInstances(false);
    }

    public Collection<BusinessContextResource> getAllBusinessContextResourceInstances(boolean transitive) {
        Collection<BusinessContextResource> result = new ArrayList<BusinessContextResource>();
        final RDFSNamedClass cls = getBusinessContextResourceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultBusinessContextResource(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getApplicationClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#Application";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Application createApplication(String name) {
        final RDFSNamedClass cls = getApplicationClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultApplication(owlModel, cls.createInstance(name).getFrameID());
    }

    public Application getApplication(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof Application) {
            return (Application) res;
        } else if (res.hasProtegeType(getApplicationClass())) {
            return new DefaultApplication(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Application> getAllApplicationInstances() {
        return getAllApplicationInstances(false);
    }

    public Collection<Application> getAllApplicationInstances(boolean transitive) {
        Collection<Application> result = new ArrayList<Application>();
        final RDFSNamedClass cls = getApplicationClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultApplication(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getCPUIntensiveActivityClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#CPUIntensiveActivity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public CPUIntensiveActivity createCPUIntensiveActivity(String name) {
        final RDFSNamedClass cls = getCPUIntensiveActivityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultCPUIntensiveActivity(owlModel, cls.createInstance(name).getFrameID());
    }

    public CPUIntensiveActivity getCPUIntensiveActivity(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof CPUIntensiveActivity) {
            return (CPUIntensiveActivity) res;
        } else if (res.hasProtegeType(getCPUIntensiveActivityClass())) {
            return new DefaultCPUIntensiveActivity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<CPUIntensiveActivity> getAllCPUIntensiveActivityInstances() {
        return getAllCPUIntensiveActivityInstances(false);
    }

    public Collection<CPUIntensiveActivity> getAllCPUIntensiveActivityInstances(boolean transitive) {
        Collection<CPUIntensiveActivity> result = new ArrayList<CPUIntensiveActivity>();
        final RDFSNamedClass cls = getCPUIntensiveActivityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultCPUIntensiveActivity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getApplicationAdaptationActionClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ApplicationAdaptationAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ApplicationAdaptationAction createApplicationAdaptationAction(String name) {
        final RDFSNamedClass cls = getApplicationAdaptationActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultApplicationAdaptationAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public ApplicationAdaptationAction getApplicationAdaptationAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ApplicationAdaptationAction) {
            return (ApplicationAdaptationAction) res;
        } else if (res.hasProtegeType(getApplicationAdaptationActionClass())) {
            return new DefaultApplicationAdaptationAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ApplicationAdaptationAction> getAllApplicationAdaptationActionInstances() {
        return getAllApplicationAdaptationActionInstances(false);
    }

    public Collection<ApplicationAdaptationAction> getAllApplicationAdaptationActionInstances(boolean transitive) {
        Collection<ApplicationAdaptationAction> result = new ArrayList<ApplicationAdaptationAction>();
        final RDFSNamedClass cls = getApplicationAdaptationActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultApplicationAdaptationAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getApplicationRedesignClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ApplicationRedesign";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ApplicationRedesign createApplicationRedesign(String name) {
        final RDFSNamedClass cls = getApplicationRedesignClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultApplicationRedesign(owlModel, cls.createInstance(name).getFrameID());
    }

    public ApplicationRedesign getApplicationRedesign(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ApplicationRedesign) {
            return (ApplicationRedesign) res;
        } else if (res.hasProtegeType(getApplicationRedesignClass())) {
            return new DefaultApplicationRedesign(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ApplicationRedesign> getAllApplicationRedesignInstances() {
        return getAllApplicationRedesignInstances(false);
    }

    public Collection<ApplicationRedesign> getAllApplicationRedesignInstances(boolean transitive) {
        Collection<ApplicationRedesign> result = new ArrayList<ApplicationRedesign>();
        final RDFSNamedClass cls = getApplicationRedesignClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultApplicationRedesign(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getITFacilityActiveResourceClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ITFacilityActiveResource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ITFacilityActiveResource createITFacilityActiveResource(String name) {
        final RDFSNamedClass cls = getITFacilityActiveResourceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultITFacilityActiveResource(owlModel, cls.createInstance(name).getFrameID());
    }

    public ITFacilityActiveResource getITFacilityActiveResource(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ITFacilityActiveResource) {
            return (ITFacilityActiveResource) res;
        } else if (res.hasProtegeType(getITFacilityActiveResourceClass())) {
            return new DefaultITFacilityActiveResource(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ITFacilityActiveResource> getAllITFacilityActiveResourceInstances() {
        return getAllITFacilityActiveResourceInstances(false);
    }

    public Collection<ITFacilityActiveResource> getAllITFacilityActiveResourceInstances(boolean transitive) {
        Collection<ITFacilityActiveResource> result = new ArrayList<ITFacilityActiveResource>();
        final RDFSNamedClass cls = getITFacilityActiveResourceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultITFacilityActiveResource(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHDDClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#HDD";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public HDD createHDD(String name) {
        final RDFSNamedClass cls = getHDDClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultHDD(owlModel, cls.createInstance(name).getFrameID());
    }

    public HDD getHDD(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof HDD) {
            return (HDD) res;
        } else if (res.hasProtegeType(getHDDClass())) {
            return new DefaultHDD(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<HDD> getAllHDDInstances() {
        return getAllHDDInstances(false);
    }

    public Collection<HDD> getAllHDDInstances(boolean transitive) {
        Collection<HDD> result = new ArrayList<HDD>();
        final RDFSNamedClass cls = getHDDClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHDD(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSimpleResourceClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#SimpleResource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SimpleResource createSimpleResource(String name) {
        final RDFSNamedClass cls = getSimpleResourceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultSimpleResource(owlModel, cls.createInstance(name).getFrameID());
    }

    public SimpleResource getSimpleResource(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof SimpleResource) {
            return (SimpleResource) res;
        } else if (res.hasProtegeType(getSimpleResourceClass())) {
            return new DefaultSimpleResource(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<SimpleResource> getAllSimpleResourceInstances() {
        return getAllSimpleResourceInstances(false);
    }

    public Collection<SimpleResource> getAllSimpleResourceInstances(boolean transitive) {
        Collection<SimpleResource> result = new ArrayList<SimpleResource>();
        final RDFSNamedClass cls = getSimpleResourceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSimpleResource(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getITComputingContextPolicyClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ITComputingContextPolicy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ITComputingContextPolicy createITComputingContextPolicy(String name) {
        final RDFSNamedClass cls = getITComputingContextPolicyClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultITComputingContextPolicy(owlModel, cls.createInstance(name).getFrameID());
    }

    public ITComputingContextPolicy getITComputingContextPolicy(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ITComputingContextPolicy) {
            return (ITComputingContextPolicy) res;
        } else if (res.hasProtegeType(getITComputingContextPolicyClass())) {
            return new DefaultITComputingContextPolicy(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ITComputingContextPolicy> getAllITComputingContextPolicyInstances() {
        return getAllITComputingContextPolicyInstances(false);
    }

    public Collection<ITComputingContextPolicy> getAllITComputingContextPolicyInstances(boolean transitive) {
        Collection<ITComputingContextPolicy> result = new ArrayList<ITComputingContextPolicy>();
        final RDFSNamedClass cls = getITComputingContextPolicyClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultITComputingContextPolicy(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getITFacilityPassiveResourceClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ITFacilityPassiveResource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ITFacilityPassiveResource createITFacilityPassiveResource(String name) {
        final RDFSNamedClass cls = getITFacilityPassiveResourceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultITFacilityPassiveResource(owlModel, cls.createInstance(name).getFrameID());
    }

    public ITFacilityPassiveResource getITFacilityPassiveResource(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ITFacilityPassiveResource) {
            return (ITFacilityPassiveResource) res;
        } else if (res.hasProtegeType(getITFacilityPassiveResourceClass())) {
            return new DefaultITFacilityPassiveResource(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ITFacilityPassiveResource> getAllITFacilityPassiveResourceInstances() {
        return getAllITFacilityPassiveResourceInstances(false);
    }

    public Collection<ITFacilityPassiveResource> getAllITFacilityPassiveResourceInstances(boolean transitive) {
        Collection<ITFacilityPassiveResource> result = new ArrayList<ITFacilityPassiveResource>();
        final RDFSNamedClass cls = getITFacilityPassiveResourceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultITFacilityPassiveResource(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getMigrateActivityClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#MigrateActivity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public MigrateActivity createMigrateActivity(String name) {
        final RDFSNamedClass cls = getMigrateActivityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultMigrateActivity(owlModel, cls.createInstance(name).getFrameID());
    }

    public MigrateActivity getMigrateActivity(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof MigrateActivity) {
            return (MigrateActivity) res;
        } else if (res.hasProtegeType(getMigrateActivityClass())) {
            return new DefaultMigrateActivity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<MigrateActivity> getAllMigrateActivityInstances() {
        return getAllMigrateActivityInstances(false);
    }

    public Collection<MigrateActivity> getAllMigrateActivityInstances(boolean transitive) {
        Collection<MigrateActivity> result = new ArrayList<MigrateActivity>();
        final RDFSNamedClass cls = getMigrateActivityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultMigrateActivity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getConsolidationActionClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ConsolidationAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ConsolidationAction createConsolidationAction(String name) {
        final RDFSNamedClass cls = getConsolidationActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultConsolidationAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public ConsolidationAction getConsolidationAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ConsolidationAction) {
            return (ConsolidationAction) res;
        } else if (res.hasProtegeType(getConsolidationActionClass())) {
            return new DefaultConsolidationAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ConsolidationAction> getAllConsolidationActionInstances() {
        return getAllConsolidationActionInstances(false);
    }

    public Collection<ConsolidationAction> getAllConsolidationActionInstances(boolean transitive) {
        Collection<ConsolidationAction> result = new ArrayList<ConsolidationAction>();
        final RDFSNamedClass cls = getConsolidationActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultConsolidationAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSensorClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#Sensor";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Sensor createSensor(String name) {
        final RDFSNamedClass cls = getSensorClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultSensor(owlModel, cls.createInstance(name).getFrameID());
    }

    public Sensor getSensor(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof Sensor) {
            return (Sensor) res;
        } else if (res.hasProtegeType(getSensorClass())) {
            return new DefaultSensor(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Sensor> getAllSensorInstances() {
        return getAllSensorInstances(false);
    }

    public Collection<Sensor> getAllSensorInstances(boolean transitive) {
        Collection<Sensor> result = new ArrayList<Sensor>();
        final RDFSNamedClass cls = getSensorClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSensor(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getActuatorClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#Actuator";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Actuator createActuator(String name) {
        final RDFSNamedClass cls = getActuatorClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultActuator(owlModel, cls.createInstance(name).getFrameID());
    }

    public Actuator getActuator(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof Actuator) {
            return (Actuator) res;
        } else if (res.hasProtegeType(getActuatorClass())) {
            return new DefaultActuator(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Actuator> getAllActuatorInstances() {
        return getAllActuatorInstances(false);
    }

    public Collection<Actuator> getAllActuatorInstances(boolean transitive) {
        Collection<Actuator> result = new ArrayList<Actuator>();
        final RDFSNamedClass cls = getActuatorClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultActuator(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getBusinessPolicyClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#BusinessPolicy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public BusinessPolicy createBusinessPolicy(String name) {
        final RDFSNamedClass cls = getBusinessPolicyClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultBusinessPolicy(owlModel, cls.createInstance(name).getFrameID());
    }

    public BusinessPolicy getBusinessPolicy(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof BusinessPolicy) {
            return (BusinessPolicy) res;
        } else if (res.hasProtegeType(getBusinessPolicyClass())) {
            return new DefaultBusinessPolicy(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<BusinessPolicy> getAllBusinessPolicyInstances() {
        return getAllBusinessPolicyInstances(false);
    }

    public Collection<BusinessPolicy> getAllBusinessPolicyInstances(boolean transitive) {
        Collection<BusinessPolicy> result = new ArrayList<BusinessPolicy>();
        final RDFSNamedClass cls = getBusinessPolicyClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultBusinessPolicy(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getMEMClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#MEM";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public MEM createMEM(String name) {
        final RDFSNamedClass cls = getMEMClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultMEM(owlModel, cls.createInstance(name).getFrameID());
    }

    public MEM getMEM(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof MEM) {
            return (MEM) res;
        } else if (res.hasProtegeType(getMEMClass())) {
            return new DefaultMEM(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<MEM> getAllMEMInstances() {
        return getAllMEMInstances(false);
    }

    public Collection<MEM> getAllMEMInstances(boolean transitive) {
        Collection<MEM> result = new ArrayList<MEM>();
        final RDFSNamedClass cls = getMEMClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultMEM(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getExternalStorageClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ExternalStorage";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ExternalStorage createExternalStorage(String name) {
        final RDFSNamedClass cls = getExternalStorageClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultExternalStorage(owlModel, cls.createInstance(name).getFrameID());
    }

    public ExternalStorage getExternalStorage(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ExternalStorage) {
            return (ExternalStorage) res;
        } else if (res.hasProtegeType(getExternalStorageClass())) {
            return new DefaultExternalStorage(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ExternalStorage> getAllExternalStorageInstances() {
        return getAllExternalStorageInstances(false);
    }

    public Collection<ExternalStorage> getAllExternalStorageInstances(boolean transitive) {
        Collection<ExternalStorage> result = new ArrayList<ExternalStorage>();
        final RDFSNamedClass cls = getExternalStorageClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultExternalStorage(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getCPUClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#CPU";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public CPU createCPU(String name) {
        final RDFSNamedClass cls = getCPUClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultCPU(owlModel, cls.createInstance(name).getFrameID());
    }

    public CPU getCPU(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof CPU) {
            return (CPU) res;
        } else if (res.hasProtegeType(getCPUClass())) {
            return new DefaultCPU(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<CPU> getAllCPUInstances() {
        return getAllCPUInstances(false);
    }

    public Collection<CPU> getAllCPUInstances(boolean transitive) {
        Collection<CPU> result = new ArrayList<CPU>();
        final RDFSNamedClass cls = getCPUClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultCPU(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSLAPolicyClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#SLAPolicy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SLAPolicy createSLAPolicy(String name) {
        final RDFSNamedClass cls = getSLAPolicyClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultSLAPolicy(owlModel, cls.createInstance(name).getFrameID());
    }

    public SLAPolicy getSLAPolicy(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof SLAPolicy) {
            return (SLAPolicy) res;
        } else if (res.hasProtegeType(getSLAPolicyClass())) {
            return new DefaultSLAPolicy(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<SLAPolicy> getAllSLAPolicyInstances() {
        return getAllSLAPolicyInstances(false);
    }

    public Collection<SLAPolicy> getAllSLAPolicyInstances(boolean transitive) {
        Collection<SLAPolicy> result = new ArrayList<SLAPolicy>();
        final RDFSNamedClass cls = getSLAPolicyClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSLAPolicy(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getMEMIntensiveActivityClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#MEMIntensiveActivity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public MEMIntensiveActivity createMEMIntensiveActivity(String name) {
        final RDFSNamedClass cls = getMEMIntensiveActivityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultMEMIntensiveActivity(owlModel, cls.createInstance(name).getFrameID());
    }

    public MEMIntensiveActivity getMEMIntensiveActivity(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof MEMIntensiveActivity) {
            return (MEMIntensiveActivity) res;
        } else if (res.hasProtegeType(getMEMIntensiveActivityClass())) {
            return new DefaultMEMIntensiveActivity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<MEMIntensiveActivity> getAllMEMIntensiveActivityInstances() {
        return getAllMEMIntensiveActivityInstances(false);
    }

    public Collection<MEMIntensiveActivity> getAllMEMIntensiveActivityInstances(boolean transitive) {
        Collection<MEMIntensiveActivity> result = new ArrayList<MEMIntensiveActivity>();
        final RDFSNamedClass cls = getMEMIntensiveActivityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultMEMIntensiveActivity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getFacilityClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#Facility";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Facility createFacility(String name) {
        final RDFSNamedClass cls = getFacilityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultFacility(owlModel, cls.createInstance(name).getFrameID());
    }

    public Facility getFacility(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof Facility) {
            return (Facility) res;
        } else if (res.hasProtegeType(getFacilityClass())) {
            return new DefaultFacility(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Facility> getAllFacilityInstances() {
        return getAllFacilityInstances(false);
    }

    public Collection<Facility> getAllFacilityInstances(boolean transitive) {
        Collection<Facility> result = new ArrayList<Facility>();
        final RDFSNamedClass cls = getFacilityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultFacility(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getQoSPolicyClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#QoSPolicy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public QoSPolicy createQoSPolicy(String name) {
        final RDFSNamedClass cls = getQoSPolicyClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultQoSPolicy(owlModel, cls.createInstance(name).getFrameID());
    }

    public QoSPolicy getQoSPolicy(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof QoSPolicy) {
            return (QoSPolicy) res;
        } else if (res.hasProtegeType(getQoSPolicyClass())) {
            return new DefaultQoSPolicy(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<QoSPolicy> getAllQoSPolicyInstances() {
        return getAllQoSPolicyInstances(false);
    }

    public Collection<QoSPolicy> getAllQoSPolicyInstances(boolean transitive) {
        Collection<QoSPolicy> result = new ArrayList<QoSPolicy>();
        final RDFSNamedClass cls = getQoSPolicyClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultQoSPolicy(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getDeployActivityClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#DeployActivity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public DeployActivity createDeployActivity(String name) {
        final RDFSNamedClass cls = getDeployActivityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultDeployActivity(owlModel, cls.createInstance(name).getFrameID());
    }

    public DeployActivity getDeployActivity(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof DeployActivity) {
            return (DeployActivity) res;
        } else if (res.hasProtegeType(getDeployActivityClass())) {
            return new DefaultDeployActivity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<DeployActivity> getAllDeployActivityInstances() {
        return getAllDeployActivityInstances(false);
    }

    public Collection<DeployActivity> getAllDeployActivityInstances(boolean transitive) {
        Collection<DeployActivity> result = new ArrayList<DeployActivity>();
        final RDFSNamedClass cls = getDeployActivityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDeployActivity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getEnvironmentPolicyClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#EnvironmentPolicy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public EnvironmentPolicy createEnvironmentPolicy(String name) {
        final RDFSNamedClass cls = getEnvironmentPolicyClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultEnvironmentPolicy(owlModel, cls.createInstance(name).getFrameID());
    }

    public EnvironmentPolicy getEnvironmentPolicy(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof EnvironmentPolicy) {
            return (EnvironmentPolicy) res;
        } else if (res.hasProtegeType(getEnvironmentPolicyClass())) {
            return new DefaultEnvironmentPolicy(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<EnvironmentPolicy> getAllEnvironmentPolicyInstances() {
        return getAllEnvironmentPolicyInstances(false);
    }

    public Collection<EnvironmentPolicy> getAllEnvironmentPolicyInstances(boolean transitive) {
        Collection<EnvironmentPolicy> result = new ArrayList<EnvironmentPolicy>();
        final RDFSNamedClass cls = getEnvironmentPolicyClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultEnvironmentPolicy(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getITFacilityResourceAdaptationActionClass() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ITFacilityResourceAdaptationAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ITFacilityResourceAdaptationAction createITFacilityResourceAdaptationAction(String name) {
        final RDFSNamedClass cls = getITFacilityResourceAdaptationActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return new DefaultITFacilityResourceAdaptationAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public ITFacilityResourceAdaptationAction getITFacilityResourceAdaptationAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {
            return null;
        }
        if (res instanceof ITFacilityResourceAdaptationAction) {
            return (ITFacilityResourceAdaptationAction) res;
        } else if (res.hasProtegeType(getITFacilityResourceAdaptationActionClass())) {
            return new DefaultITFacilityResourceAdaptationAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ITFacilityResourceAdaptationAction> getAllITFacilityResourceAdaptationActionInstances() {
        return getAllITFacilityResourceAdaptationActionInstances(false);
    }

    public Collection<ITFacilityResourceAdaptationAction> getAllITFacilityResourceAdaptationActionInstances(boolean transitive) {
        Collection<ITFacilityResourceAdaptationAction> result = new ArrayList<ITFacilityResourceAdaptationAction>();
        final RDFSNamedClass cls = getITFacilityResourceAdaptationActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator(); it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultITFacilityResourceAdaptationAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFProperty getToLowOrHighStateProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#toLowOrHighState";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getStateAfterActionProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#stateAfterAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getStateBeforeActionProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#stateBeforeAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getEnergyStatesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#energyStates";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getResourcePropertyProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resourceProperty";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCpuRequiredValueProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#cpuRequiredValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getMemRequiredValueProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#memRequiredValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHddAllocatedValueProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#hddAllocatedValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformanceEstimationProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#performanceEstimation";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCpuAllocatedValueProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#cpuAllocatedValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getMemAllocatedValueProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#memAllocatedValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformanceDegradationProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#performanceDegradation";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHddRequiredValueProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#hddRequiredValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPolicyNameProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#policyName";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getEvaluationConditionProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#evaluationCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsRespectedProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#isRespected";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getResourceWorkloadPropertyProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resourceWorkloadProperty";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getRotationSpeedProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#rotationSpeed";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getClockRateProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#clockRate";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getNoStatesJumpProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#noStatesJump";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCacheRateProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#cacheRate";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCurrentWorkloadProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#currentWorkload";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getMaximumWorkloadProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#maximumWorkload";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getRecordedValueProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#recordedValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getResourceIDProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resourceID";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCurrentEnergyStateProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#currentEnergyState";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getOptimalWorkloadProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#optimalWorkload";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getResourceOnProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resourceOn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasAttachedProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#hasAttached";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPolicyActionProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#policyAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getRunningActivitiesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#runningActivities";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getResourcesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resources";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getActivityPoliciesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#activityPolicies";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getAssociatedActionsProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#associatedActions";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPolicySubjectProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#policySubject";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPolicyTargetProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#policyTarget";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getActivityProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#activity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getResourceFromProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resourceFrom";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getResourceToProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resourceTo";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getSimpleResourcesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#simpleResources";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getBP_ActivityListProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#BP_ActivityList";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getAssociatedResourcesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#associatedResources";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getInterractsWithProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#interractsWith";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getFacilityActionProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#facilityAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPartOfProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#partOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }
}
