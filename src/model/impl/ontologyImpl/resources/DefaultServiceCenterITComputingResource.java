package model.impl.ontologyImpl.resources;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.RDFProperty;
import model.interfaces.resources.ServiceCenterITComputingResource;
import model.interfaces.resources.applications.ApplicationActivity;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ServiceCenterITComputingResource
 *
 * @version generated on Tue Jul 06 17:49:10 GMT 2010
 */
//TODO: de facut abstracta
public class DefaultServiceCenterITComputingResource extends DefaultContextResource
        implements ServiceCenterITComputingResource {

    public DefaultServiceCenterITComputingResource(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }


    public DefaultServiceCenterITComputingResource() {
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#currentEnergyState

    public Integer getCurrentEnergyState() {
        if (hasCurrentEnergyState()) {
            return getPropertyValueLiteral(getCurrentEnergyStateProperty()).getInt();
        } else {
            setCurrentEnergyState(0);
            return 0;
        }
    }


    public RDFProperty getCurrentEnergyStateProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#currentEnergyState";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasCurrentEnergyState() {
        return getPropertyValueCount(getCurrentEnergyStateProperty()) > 0;
    }


    public void setCurrentEnergyState(Integer newCurrentEnergyState) {
        if (getCurrentEnergyStateProperty() != null) {
            setPropertyValue(getCurrentEnergyStateProperty(), new java.lang.Integer(newCurrentEnergyState));
        } else {
            addPropertyValue(getCurrentEnergyStateProperty(), newCurrentEnergyState);
        }
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#currentWorkload

    public Double getCurrentWorkLoad() {
        if (hasCurrentWorkload()) {
            return getPropertyValueLiteral(getCurrentWorkloadProperty()).getDouble();
        } else {
            setCurrentWorkLoad(0.0);
            return 0.0;
        }
    }


    public RDFProperty getCurrentWorkloadProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#currentWorkload";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasCurrentWorkload() {
        return getPropertyValueCount(getCurrentWorkloadProperty()) > 0;
    }


    public void setCurrentWorkLoad(Double newCurrentWorkload) {
        setPropertyValue(getCurrentWorkloadProperty(), new java.lang.Float(newCurrentWorkload));
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#energyStates

    public List<Integer> getEnergyStates() {
        return new ArrayList<Integer>(getPropertyValues(getEnergyStatesProperty()));
    }


    public RDFProperty getEnergyStatesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#energyStates";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasEnergyStates() {
        return getPropertyValueCount(getEnergyStatesProperty()) > 0;
    }


    public Iterator listEnergyStates() {
        return listPropertyValues(getEnergyStatesProperty());
    }


    public void addEnergyStates(int newEnergyStates) {
        addPropertyValue(getEnergyStatesProperty(), newEnergyStates);
    }


    public void removeEnergyStates(int oldEnergyStates) {
        removePropertyValue(getEnergyStatesProperty(), oldEnergyStates);
    }


    public void setEnergyStates(List<Integer> newEnergyStates) {
        setPropertyValues(getEnergyStatesProperty(), newEnergyStates);
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#maximumWorkload

    public Double getMaximumWorkLoad() {
        if (hasMaximumWorkload()) {
            return getPropertyValueLiteral(getMaximumWorkloadProperty()).getDouble();
        } else {
            return 0.0;
        }
    }


    public RDFProperty getMaximumWorkloadProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#maximumWorkload";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasMaximumWorkload() {
        return getPropertyValueCount(getMaximumWorkloadProperty()) > 0;
    }


    public void setMaximumWorkLoad(Double newMaximumWorkload) {
        setPropertyValue(getMaximumWorkloadProperty(), new java.lang.Float(newMaximumWorkload));
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#optimalWorkload

    public Double getOptimalWorkLoad() {
        return getPropertyValueLiteral(getOptimalWorkloadProperty()).getDouble();
    }


    public RDFProperty getOptimalWorkloadProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#optimalWorkload";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasOptimalWorkload() {
        return getPropertyValueCount(getOptimalWorkloadProperty()) > 0;
    }


    public void setOptimalWorkLoad(Double newOptimalWorkload) {
        setPropertyValue(getOptimalWorkloadProperty(), new java.lang.Float(newOptimalWorkload));
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resourceWorkloadProperty

    public List<String> getResourceWorkloadProperty() {
        return new ArrayList<String>(getPropertyValues(getResourceWorkloadPropertyProperty()));
    }


    public RDFProperty getResourceWorkloadPropertyProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resourceWorkloadProperty";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasResourceWorkloadProperty() {
        return getPropertyValueCount(getResourceWorkloadPropertyProperty()) > 0;
    }


    public Iterator listResourceWorkloadProperty() {
        return listPropertyValues(getResourceWorkloadPropertyProperty());
    }


    public void addResourceWorkloadProperty(String newResourceWorkloadProperty) {
        addPropertyValue(getResourceWorkloadPropertyProperty(), newResourceWorkloadProperty);
    }


    public void removeResourceWorkloadProperty(String oldResourceWorkloadProperty) {
        removePropertyValue(getResourceWorkloadPropertyProperty(), oldResourceWorkloadProperty);
    }


    public void setResourceWorkloadProperty(List<String> newResourceWorkloadProperty) {
        setPropertyValues(getResourceWorkloadPropertyProperty(), newResourceWorkloadProperty);
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#runningActivities

    public List<ApplicationActivity> getRunningActivities() {
        return (new ArrayList<ApplicationActivity>(getPropertyValuesAs(getRunningActivitiesProperty(), ApplicationActivity.class)));
    }


    public RDFProperty getRunningActivitiesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#runningActivities";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasRunningActivities() {
        return getPropertyValueCount(getRunningActivitiesProperty()) > 0;
    }


    public Iterator listRunningActivities() {
        return listPropertyValuesAs(getRunningActivitiesProperty(), ApplicationActivity.class);
    }


    public void addRunningActivity(ApplicationActivity newRunningActivities) {
        addPropertyValue(getRunningActivitiesProperty(), newRunningActivities);
    }


    public void removeRunningActivity(ApplicationActivity oldRunningActivities) {
        removePropertyValue(getRunningActivitiesProperty(), oldRunningActivities);
    }


    public void setRunningActivities(List<ApplicationActivity> newRunningActivities) {
        setPropertyValues(getRunningActivitiesProperty(), newRunningActivities);
    }
}
