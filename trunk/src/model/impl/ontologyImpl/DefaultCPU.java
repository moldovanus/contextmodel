package model.impl.ontologyImpl;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.RDFProperty;
import model.interfaces.ContextElement;
import model.interfaces.resources.CPU;

import java.util.Collection;
import java.util.Iterator;


/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#CPU
 *
 * @version generated on Tue Jul 06 17:49:11 GMT 2010
 */
public class DefaultCPU extends DefaultSimpleResource
        implements CPU {

    public DefaultCPU(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }


    public DefaultCPU() {
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#clockRate

    public Collection getClockRate() {
        return getPropertyValues(getClockRateProperty());
    }


    public RDFProperty getClockRateProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#clockRate";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasClockRate() {
        return getPropertyValueCount(getClockRateProperty()) > 0;
    }


    public Iterator listClockRate() {
        return listPropertyValues(getClockRateProperty());
    }


    public void addClockRate(float newClockRate) {
        addPropertyValue(getClockRateProperty(), newClockRate);
    }


    public void removeClockRate(float oldClockRate) {
        removePropertyValue(getClockRateProperty(), oldClockRate);
    }


    public void setClockRate(Collection newClockRate) {
        setPropertyValues(getClockRateProperty(), newClockRate);
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#partOf

    public Collection getPartOf() {
        return getPropertyValuesAs(getPartOfProperty(), ContextElement.class);
    }


    public RDFProperty getPartOfProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#partOf";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasPartOf() {
        return getPropertyValueCount(getPartOfProperty()) > 0;
    }


    public Iterator listPartOf() {
        return listPropertyValuesAs(getPartOfProperty(), ContextElement.class);
    }


    public void addPartOf(ContextElement newPartOf) {
        addPropertyValue(getPartOfProperty(), newPartOf);
    }


    public void removePartOf(ContextElement oldPartOf) {
        removePropertyValue(getPartOfProperty(), oldPartOf);
    }


    public void setPartOf(Collection newPartOf) {
        setPropertyValues(getPartOfProperty(), newPartOf);
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#rotationSpeed

    public float getRotationSpeed() {
        return getPropertyValueLiteral(getRotationSpeedProperty()).getFloat();
    }


    public RDFProperty getRotationSpeedProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#rotationSpeed";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasRotationSpeed() {
        return getPropertyValueCount(getRotationSpeedProperty()) > 0;
    }


    public void setRotationSpeed(float newRotationSpeed) {
        setPropertyValue(getRotationSpeedProperty(), new java.lang.Float(newRotationSpeed));
    }
}
