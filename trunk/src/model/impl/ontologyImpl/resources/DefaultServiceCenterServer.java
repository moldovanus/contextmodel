package model.impl.ontologyImpl.resources;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.OWLModel;
import model.interfaces.resources.CPU;
import model.interfaces.resources.HDD;
import model.interfaces.resources.MEM;
import model.interfaces.resources.ServiceCenterServer;
import model.interfaces.resources.applications.ApplicationActivity;

import java.util.Collection;
import java.util.List;


/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ServiceCenterServer
 *
 * @version generated on Tue Jul 06 17:49:10 GMT 2010
 */
public class DefaultServiceCenterServer extends DefaultComplexResource
        implements ServiceCenterServer {

    public DefaultServiceCenterServer(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }


    public DefaultServiceCenterServer() {
    }

    public boolean hostsActivity(ApplicationActivity activity) {
        List<ApplicationActivity> activities = getRunningActivities();
        for (ApplicationActivity a : activities) {
            if (a.getName().equals(activity.getName())) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void addRunningActivity(ApplicationActivity activity) {
        Collection<CPU> cpus = this.getCpuResources();
        Collection<MEM> mems = this.getMemResources();
        Collection<HDD> hdds = this.getHddResources();

        for (CPU cpu : cpus) {
            if (cpu.hasResourcesFor(activity)) {
                cpu.addRunningActivity(activity);
                break;
            }
        }

        for (MEM mem : mems) {
            if (mem.hasResourcesFor(activity)) {
                mem.addRunningActivity(activity);
                break;
            }
        }

        for (HDD hdd : hdds) {
            if (hdd.hasResourcesFor(activity)) {
                hdd.addRunningActivity(activity);
            }
        }

        super.addRunningActivity(activity);    //To change body of overridden methods use File | Settings | File Templates.

        activity.setCpuAllocatedValue(activity.getCpuRequiredMaxValue());
        activity.setMemAllocatedValue(activity.getMemRequiredMaxValue());
        activity.setHddAllocatedValue(activity.getHddRequiredMaxValue());
    }

    @Override
    public void removeRunningActivity(ApplicationActivity activity) {
        Collection<CPU> cpus = this.getCpuResources();
        Collection<MEM> mems = this.getMemResources();
        Collection<HDD> hdds = this.getHddResources();

        for (CPU cpu : cpus) {
            if (cpu.getRunningActivities().contains(activity)) {
                cpu.removeRunningActivity(activity);
                break;
            }
        }

        for (MEM mem : mems) {
            if (mem.getRunningActivities().contains(activity)) {
                mem.removeRunningActivity(activity);
                break;
            }
        }

        for (HDD hdd : hdds) {
            if (hdd.getRunningActivities().contains(activity)) {
                hdd.removeRunningActivity(activity);
            }
        }

        super.removeRunningActivity(activity);
    }
}
