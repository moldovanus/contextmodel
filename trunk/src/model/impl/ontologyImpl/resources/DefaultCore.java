package model.impl.ontologyImpl.resources;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.RDFProperty;
import model.interfaces.ContextElement;
import model.interfaces.resources.Core;
import model.interfaces.resources.applications.ApplicationActivity;

import java.util.Collection;
import java.util.Iterator;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#Core
 *
 * @version generated on Thu Aug 12 15:31:05 EEST 2010
 */
public class DefaultCore extends DefaultSimpleResource
        implements Core {

    public DefaultCore(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }


    public DefaultCore() {
    }

    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#partOf

    public Collection getPartOf() {
        return getPropertyValuesAs(getPartOfProperty(), ContextElement.class);
    }


    public RDFProperty getPartOfProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#partOf";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasPartOf() {
        return getPropertyValueCount(getPartOfProperty()) > 0;
    }


    public Iterator listPartOf() {
        return listPropertyValuesAs(getPartOfProperty(), ContextElement.class);
    }


    public void addPartOf(ContextElement newPartOf) {
        addPropertyValue(getPartOfProperty(), newPartOf);
    }


    public void removePartOf(ContextElement oldPartOf) {
        removePropertyValue(getPartOfProperty(), oldPartOf);
    }


    public void setPartOf(Collection newPartOf) {
        setPropertyValues(getPartOfProperty(), newPartOf);
    }

    @Override
    public boolean hasResourcesFor(ApplicationActivity activity) {
        return getMaximumWorkLoad() <= getCurrentWorkLoad() + activity.getCpuRequiredMaxValue();
    }

    @Override
    public void addRunningActivity(ApplicationActivity activity) {
        setCurrentWorkLoad(getCurrentWorkLoad() + activity.getCpuRequiredMaxValue());
        super.addRunningActivity(activity);    //To change body of overridden methods use File | Settings | File Templates.
    }
}
