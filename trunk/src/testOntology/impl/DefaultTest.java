package testOntology.impl;

import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.RDFNode;
import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.javacode.AbstractCodeGeneratorIndividual;
import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.RDFProperty;
import testOntology.Test;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.owl-ontologies.com/Ontology1282633635.owl#Test
 *
 * @version generated on Tue Aug 24 10:09:10 EEST 2010
 */
public class DefaultTest extends AbstractCodeGeneratorIndividual
        implements Test {

    public DefaultTest(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }


    public DefaultTest() {
    }


    // Property http://www.owl-ontologies.com/Ontology1282633635.owl#testValue

    public int getTestValue(OntModel ontModel) {
        RDFProperty rdfProperty = getTestValueProperty();
        Individual targetIndividual = ontModel.getIndividual(this.getName());
//        ExtendedIterator<Individual> iterator = ontModel.listIndividuals();
//        while (iterator.hasNext()) {
//            System.out.println(iterator.next().getURI());
//        }

        Property targetProperty = ontModel.getProperty(rdfProperty.getName());
//        if (targetIndividual.hasProperty(targetProperty)) {
//            targetIndividual.removeAll(targetProperty);
//        }

        System.out.print("ONT val: " + targetIndividual.getPropertyValue(targetProperty));
        System.out.println("  OWL val: " + super.getPropertyValue(rdfProperty));
        return targetIndividual.getPropertyValue(targetProperty).asLiteral().getInt();
    }


    public RDFProperty getTestValueProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1282633635.owl#testValue";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasTestValue() {
        return getPropertyValueCount(getTestValueProperty()) > 0;
    }


    public void setTestValue(int newTestValue, OntModel ontModel) {
        //super.setPropertyValue(rdfProperty, o);
        super.setPropertyValue(getTestValueProperty(), new java.lang.Integer(newTestValue));
//        Individual targetIndividual = ontModel.getIndividual(this.getName());
//        if (targetIndividual == null) {
//            System.out.println("It is null");
//            System.exit(1);
//        }
//        Property targetProperty = ontModel.getProperty(getTestValueProperty().getName());
//        if (targetIndividual.hasProperty(targetProperty)) {
//            targetIndividual.removeAll(targetProperty);
//        }
//        targetIndividual.setPropertyValue(targetProperty, ontModel.createLiteralStatement(
//                targetIndividual, targetProperty, newTestValue).getLiteral().as(RDFNode.class));
//
//        System.out.println("----" + getTestValue(ontModel));


    }
    //TODO; eventual o metoda de evaluate swrl rule si dai argumente sa nu stric direct ce i pe owlModel :P da vedem noi
    //TODO; ca raman ontModel si owlModel desincronizate
}
