package model.impl.ontologyImpl.impl;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.RDFProperty;
import model.impl.ontologyImpl.ContextAction;
import model.impl.ontologyImpl.DefaultContextElement;

import java.util.Collection;
import java.util.Iterator;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ContextAction
 *
 * @version generated on Fri Jul 09 18:31:36 GMT 2010
 */
public class DefaultContextAction extends DefaultContextElement
        implements ContextAction {

    public DefaultContextAction(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }


    public DefaultContextAction() {
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#activity

    public Collection getActivity() {
        return getPropertyValuesAs(getActivityProperty(), ApplicationActivity.class);
    }


    public RDFProperty getActivityProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#activity";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasActivity() {
        return getPropertyValueCount(getActivityProperty()) > 0;
    }


    public Iterator listActivity() {
        return listPropertyValuesAs(getActivityProperty(), ApplicationActivity.class);
    }


    public void addActivity(ApplicationActivity newActivity) {
        addPropertyValue(getActivityProperty(), newActivity);
    }


    public void removeActivity(ApplicationActivity oldActivity) {
        removePropertyValue(getActivityProperty(), oldActivity);
    }


    public void setActivity(Collection newActivity) {
        setPropertyValues(getActivityProperty(), newActivity);
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#associatedResources

    public Collection getAssociatedResources() {
        return getPropertyValuesAs(getAssociatedResourcesProperty(), ContextResource.class);
    }


    public RDFProperty getAssociatedResourcesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#associatedResources";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasAssociatedResources() {
        return getPropertyValueCount(getAssociatedResourcesProperty()) > 0;
    }


    public Iterator listAssociatedResources() {
        return listPropertyValuesAs(getAssociatedResourcesProperty(), ContextResource.class);
    }


    public void addAssociatedResources(ContextResource newAssociatedResources) {
        addPropertyValue(getAssociatedResourcesProperty(), newAssociatedResources);
    }


    public void removeAssociatedResources(ContextResource oldAssociatedResources) {
        removePropertyValue(getAssociatedResourcesProperty(), oldAssociatedResources);
    }


    public void setAssociatedResources(Collection newAssociatedResources) {
        setPropertyValues(getAssociatedResourcesProperty(), newAssociatedResources);
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resources

    public Collection getResources() {
        return getPropertyValuesAs(getResourcesProperty(), ContextResource.class);
    }


    public RDFProperty getResourcesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#resources";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasResources() {
        return getPropertyValueCount(getResourcesProperty()) > 0;
    }


    public Iterator listResources() {
        return listPropertyValuesAs(getResourcesProperty(), ContextResource.class);
    }


    public void addResources(ContextResource newResources) {
        addPropertyValue(getResourcesProperty(), newResources);
    }


    public void removeResources(ContextResource oldResources) {
        removePropertyValue(getResourcesProperty(), oldResources);
    }


    public void setResources(Collection newResources) {
        setPropertyValues(getResourcesProperty(), newResources);
    }
}
