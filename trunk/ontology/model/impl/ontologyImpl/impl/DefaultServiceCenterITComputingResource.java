package model.impl.ontologyImpl.impl;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.RDFProperty;
import model.impl.ontologyImpl.DefaultContextResource;
import model.impl.ontologyImpl.ServiceCenterITComputingResource;

import java.util.Collection;
import java.util.Iterator;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#ServiceCenterITComputingResource
 *
 * @version generated on Fri Jul 09 18:31:36 GMT 2010
 */
public class DefaultServiceCenterITComputingResource extends DefaultContextResource
        implements ServiceCenterITComputingResource {

    public DefaultServiceCenterITComputingResource(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }


    public DefaultServiceCenterITComputingResource() {
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#currentEnergyState

    public int getCurrentEnergyState() {
        return getPropertyValueLiteral(getCurrentEnergyStateProperty()).getInt();
    }


    public RDFProperty getCurrentEnergyStateProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#currentEnergyState";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasCurrentEnergyState() {
        return getPropertyValueCount(getCurrentEnergyStateProperty()) > 0;
    }


    public void setCurrentEnergyState(int newCurrentEnergyState) {
        setPropertyValue(getCurrentEnergyStateProperty(), new java.lang.Integer(newCurrentEnergyState));
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#currentWorkload

    public float getCurrentWorkload() {
        return getPropertyValueLiteral(getCurrentWorkloadProperty()).getFloat();
    }


    public RDFProperty getCurrentWorkloadProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#currentWorkload";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasCurrentWorkload() {
        return getPropertyValueCount(getCurrentWorkloadProperty()) > 0;
    }


    public void setCurrentWorkload(float newCurrentWorkload) {
        setPropertyValue(getCurrentWorkloadProperty(), new java.lang.Float(newCurrentWorkload));
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#energyStates

    public Collection getEnergyStates() {
        return getPropertyValues(getEnergyStatesProperty());
    }


    public RDFProperty getEnergyStatesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#energyStates";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasEnergyStates() {
        return getPropertyValueCount(getEnergyStatesProperty()) > 0;
    }


    public Iterator listEnergyStates() {
        return listPropertyValues(getEnergyStatesProperty());
    }


    public void addEnergyStates(int newEnergyStates) {
        addPropertyValue(getEnergyStatesProperty(), newEnergyStates);
    }


    public void removeEnergyStates(int oldEnergyStates) {
        removePropertyValue(getEnergyStatesProperty(), oldEnergyStates);
    }


    public void setEnergyStates(Collection newEnergyStates) {
        setPropertyValues(getEnergyStatesProperty(), newEnergyStates);
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#maximumWorkload

    public float getMaximumWorkload() {
        return getPropertyValueLiteral(getMaximumWorkloadProperty()).getFloat();
    }


    public RDFProperty getMaximumWorkloadProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#maximumWorkload";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasMaximumWorkload() {
        return getPropertyValueCount(getMaximumWorkloadProperty()) > 0;
    }


    public void setMaximumWorkload(float newMaximumWorkload) {
        setPropertyValue(getMaximumWorkloadProperty(), new java.lang.Float(newMaximumWorkload));
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#optimalWorkload

    public float getOptimalWorkload() {
        return getPropertyValueLiteral(getOptimalWorkloadProperty()).getFloat();
    }


    public RDFProperty getOptimalWorkloadProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#optimalWorkload";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasOptimalWorkload() {
        return getPropertyValueCount(getOptimalWorkloadProperty()) > 0;
    }


    public void setOptimalWorkload(float newOptimalWorkload) {
        setPropertyValue(getOptimalWorkloadProperty(), new java.lang.Float(newOptimalWorkload));
    }


    // Property http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#runningActivities

    public Collection getRunningActivities() {
        return getPropertyValuesAs(getRunningActivitiesProperty(), ApplicationActivity.class);
    }


    public RDFProperty getRunningActivitiesProperty() {
        final String uri = "http://www.semanticweb.org/ontologies/2010/6/ContextModel.owl#runningActivities";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasRunningActivities() {
        return getPropertyValueCount(getRunningActivitiesProperty()) > 0;
    }


    public Iterator listRunningActivities() {
        return listPropertyValuesAs(getRunningActivitiesProperty(), ApplicationActivity.class);
    }


    public void addRunningActivities(ApplicationActivity newRunningActivities) {
        addPropertyValue(getRunningActivitiesProperty(), newRunningActivities);
    }


    public void removeRunningActivities(ApplicationActivity oldRunningActivities) {
        removePropertyValue(getRunningActivitiesProperty(), oldRunningActivities);
    }


    public void setRunningActivities(Collection newRunningActivities) {
        setPropertyValues(getRunningActivitiesProperty(), newRunningActivities);
    }
}
